[
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "MP01 â€“ Netflix",
    "section": "",
    "text": "Code\nif(!dir.exists(file.path(\"data\", \"mp01\"))){\n  dir.create(file.path(\"data\", \"mp01\"), recursive = TRUE, showWarnings = FALSE)\n}\n\nGLOBAL_TOP_10_FILENAME  &lt;- file.path(\"data\", \"mp01\", \"global_top10_alltime.csv\")\nCOUNTRY_TOP_10_FILENAME &lt;- file.path(\"data\", \"mp01\", \"country_top10_alltime.csv\")\n\nif(!file.exists(GLOBAL_TOP_10_FILENAME)){\n  download.file(\"https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv\", \n                destfile = GLOBAL_TOP_10_FILENAME)\n}\nif(!file.exists(COUNTRY_TOP_10_FILENAME)){\n  download.file(\"https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv\", \n                destfile = COUNTRY_TOP_10_FILENAME)\n}\nCode\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\n\nLoading required package: tidyverse\n\n\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.5\nâœ” forcats   1.0.0     âœ” stringr   1.5.1\nâœ” ggplot2   3.5.2     âœ” tibble    3.3.0\nâœ” lubridate 1.9.4     âœ” tidyr     1.3.1\nâœ” purrr     1.1.0     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nif(!require(\"janitor\"))   install.packages(\"janitor\")\n\n\nLoading required package: janitor\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nCode\nif(!require(\"gt\"))        install.packages(\"gt\")\n\n\nLoading required package: gt\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\nlibrary(janitor)\nlibrary(ggplot2)\nlibrary(gt)\nCode\nGLOBAL_TOP_10 &lt;- read_tsv(GLOBAL_TOP_10_FILENAME, show_col_types = FALSE) |&gt; \n  clean_names() |&gt; \n  mutate(season_title = if_else(season_title == \"N/A\", NA_character_, season_title))\n\nCOUNTRY_TOP_10 &lt;- read_tsv(COUNTRY_TOP_10_FILENAME, show_col_types = FALSE) |&gt; \n  clean_names()\n\ncat(\"Global rows:\", nrow(GLOBAL_TOP_10), \"  Country rows:\", nrow(COUNTRY_TOP_10), \"\\n\")\n\n\nGlobal rows: 8880   Country rows: 413620"
  },
  {
    "objectID": "mp01.html#initial-data-exploration",
    "href": "mp01.html#initial-data-exploration",
    "title": "MP01 â€“ Netflix",
    "section": "Initial Data Exploration",
    "text": "Initial Data Exploration\nIn this section, we perform a first exploration of the global Netflix Top 10 dataset. Our goal is to understand the size of the dataset, the distribution of categories, and the diversity of programming represented.\n\n\nCode\n# total\ntotal_rows   &lt;- nrow(GLOBAL_TOP_10)\nunique_shows &lt;- n_distinct(GLOBAL_TOP_10$show_title)\n\n# category\ncategory_summary &lt;- GLOBAL_TOP_10 %&gt;%\n  count(category, sort = TRUE)\n\ncategory_summary %&gt;%\n  gt() %&gt;%\n  tab_header(title = \"Table 1: Number of Records by Category in Global Top 10\") %&gt;%\n  tab_style(\n    style = cell_fill(color = \"#ffe5e5\"),\n    locations = cells_body(rows = category == \"TV (English)\")\n  )\n\n\n\n\n\n\n\n\nTable 1: Number of Records by Category in Global Top 10\n\n\ncategory\nn\n\n\n\n\nFilms (English)\n2220\n\n\nFilms (Non-English)\n2220\n\n\nTV (English)\n2220\n\n\nTV (Non-English)\n2220"
  },
  {
    "objectID": "mp01.html#interpretation",
    "href": "mp01.html#interpretation",
    "title": "MP01 â€“ Netflix",
    "section": "Interpretation:",
    "text": "Interpretation:\nThe dataset containsÂ 8880Â recordsÂ coveringÂ 2852Â unique shows. Each of the four categories is evenly represented (English / Non-English TV & Films), ensuring comparability, though real-world popularity may concentrate in fewer titles."
  },
  {
    "objectID": "mp01.html#press-release-1-stranger-things-season-5",
    "href": "mp01.html#press-release-1-stranger-things-season-5",
    "title": "MP01 â€“ Netflix",
    "section": "Press Release 1: Stranger Things Season 5",
    "text": "Press Release 1: Stranger Things Season 5\n\n\nCode\nstranger_things &lt;- GLOBAL_TOP_10 %&gt;% filter(grepl(\"Stranger Things\", show_title))\n\ntotal_hours   &lt;- sum(stranger_things$weekly_hours_viewed, na.rm = TRUE)\nweeks_in_top10 &lt;- n_distinct(stranger_things$week)\n\nst_countries &lt;- COUNTRY_TOP_10 %&gt;%\n  filter(grepl(\"Stranger Things\", show_title)) %&gt;%\n  summarise(num_countries = n_distinct(country_name)) %&gt;%\n  pull(num_countries)\n\ntop_english_tv &lt;- GLOBAL_TOP_10 %&gt;%\n  filter(category == \"TV (English)\") %&gt;%\n  group_by(show_title) %&gt;%\n  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) %&gt;%\n  arrange(desc(total_hours)) %&gt;%\n  slice(1:5)\n\n\n\nðŸ“¢Â Netflixâ€™s Global Phenomenon Returns: Stranger Things Prepares for a Historic Final Season\n\nTotal hours viewed:Â 2,967,980,000\nWeeks in Top 10:Â 20\nCountries appeared:Â 93\n\nCompared with other English TV shows (likeÂ WednesdayÂ andÂ Bridgerton), Stranger Things remains one of the strongest titles worldwide.\n\n\nCode\nst_data &lt;- stranger_things %&gt;%\n  group_by(week) %&gt;%\n  summarise(weekly_hours = sum(weekly_hours_viewed, na.rm = TRUE))\n\nggplot(st_data, aes(x = week, y = weekly_hours/1e6)) +\n  geom_line(color = \"#e50914\", size = 1.2) +\n  geom_point(color = \"#e50914\") +\n  labs(title = \"Stranger Things Global Viewership Trend\",\n       x = \"Week\", y = \"Weekly Hours Viewed (Millions)\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead."
  },
  {
    "objectID": "mp01.html#press-release-2-netflixs-blockbuster-growth-in-india",
    "href": "mp01.html#press-release-2-netflixs-blockbuster-growth-in-india",
    "title": "MP01 â€“ Netflix",
    "section": "Press Release 2: Netflixâ€™s Blockbuster Growth in India",
    "text": "Press Release 2: Netflixâ€™s Blockbuster Growth in India\n\n\nCode\nindia_top &lt;- COUNTRY_TOP_10 %&gt;% filter(country_name == \"India\")\nus_top    &lt;- COUNTRY_TOP_10 %&gt;% filter(country_name == \"United States\")\n\nindia_hours &lt;- GLOBAL_TOP_10 %&gt;% \n  filter(show_title %in% india_top$show_title) %&gt;% \n  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) %&gt;% \n  pull(total_hours)\n\nindia_shows &lt;- n_distinct(india_top$show_title)\nindia_unique &lt;- setdiff(india_top$show_title, us_top$show_title)\n\n\n\nðŸ“¢ Netflix Celebrates Record-Breaking Hindi Hits and Rapid Subscriber Growth in the Worldâ€™s Largest Market\n\nTotal Hindi content hours:Â 104,909,000,000\nUnique Indian shows in Top 10:Â 1173\nLocal-only hits:Â Mahavatar Narsimha,Â Son of Sardaar 2\n\n\n\nCode\nindia_top10 &lt;- india_top %&gt;%\n  group_by(show_title) %&gt;%\n  summarise(weeks_in_top10 = n_distinct(week)) %&gt;%\n  arrange(desc(weeks_in_top10)) %&gt;%\n  slice(1:10)\n\nggplot(india_top10, aes(x = reorder(show_title, weeks_in_top10), y = weeks_in_top10)) +\n  geom_col(fill = \"#E50914\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Top 10 Netflix Shows in India (Weeks in Top 10)\", x = \"Show\", y = \"Weeks\")"
  },
  {
    "objectID": "mp01.html#press-release-3-netflixs-global-non-english-tv-success",
    "href": "mp01.html#press-release-3-netflixs-global-non-english-tv-success",
    "title": "MP01 â€“ Netflix",
    "section": "Press Release 3: Netflixâ€™s Global Non-English TV Success",
    "text": "Press Release 3: Netflixâ€™s Global Non-English TV Success\n\n\nCode\nnon_english_tv &lt;- GLOBAL_TOP_10 %&gt;% filter(category == \"TV (Non-English)\")\n\nnon_eng_hours &lt;- sum(non_english_tv$weekly_hours_viewed, na.rm = TRUE)\nnon_eng_shows &lt;- n_distinct(non_english_tv$show_title)\n\ntop_non_eng &lt;- non_english_tv %&gt;%\n  group_by(show_title) %&gt;%\n  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE),\n            total_weeks = n_distinct(week)) %&gt;%\n  arrange(desc(total_hours)) %&gt;%\n  slice(1:5)\n\n\n\nðŸ“¢ From Seoul to Madrid: Non-English Originals Reshape Netflixâ€™s Global Top 10\n\nNon-English hours viewed:Â 44,714,410,000\nUnique Non-English shows:Â 530\nBreakout titles:Â Squid Game,Â Money Heist\n\n\n\nCode\ntv_compare &lt;- GLOBAL_TOP_10 %&gt;%\n  filter(category %in% c(\"TV (English)\", \"TV (Non-English)\")) %&gt;%\n  group_by(category) %&gt;%\n  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE))\n\nggplot(tv_compare, aes(x = category, y = total_hours/1e9, fill = category)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_manual(values = c(\"#e50914\", \"#221f1f\")) +\n  labs(title = \"English vs Non-English TV (Billions of Hours)\",\n       x = \"\", y = \"Total Hours (Billions)\") +\n  theme_minimal()"
  },
  {
    "objectID": "lab03.html",
    "href": "lab03.html",
    "title": "STA 9750 â€“ Lab 03",
    "section": "",
    "text": "This is the Lab 03 report covering Vectors, Review, Packages, Variables, Comments, Vector Types, Functions, Control Flow, and Programming Exercises."
  },
  {
    "objectID": "lab03.html#creating-vectors",
    "href": "lab03.html#creating-vectors",
    "title": "STA 9750 â€“ Lab 03",
    "section": "Creating vectors",
    "text": "Creating vectors\n\n\nCode\nx &lt;- c(1, 3, 5, 7)\ny &lt;- 2:6\nz &lt;- seq(0, 1, by = 0.2)\nx; y; z\n\n\n[1] 1 3 5 7\n\n\n[1] 2 3 4 5 6\n\n\n[1] 0.0 0.2 0.4 0.6 0.8 1.0\n\n\n\n\nCode\nx + 1\n\n\n[1] 2 4 6 8\n\n\nCode\nx * 2\n\n\n[1]  2  6 10 14\n\n\nCode\nx + c(1, 2)   # Recycling rule\n\n\n[1] 2 5 6 9\n\n\n\n\nCode\na &lt;- 5; b &lt;- 2\na^b; a %% b; a %/% b\n\n\n[1] 25\n\n\n[1] 1\n\n\n[1] 2\n\n\n\n\nCode\nls()\n\n\n[1] \"a\" \"b\" \"x\" \"y\" \"z\"\n\n\nCode\nrm(b); ls()\n\n\n[1] \"a\" \"x\" \"y\" \"z\"\n\n\nCode\n# Use ?mean in the Console to open help; avoid putting ? in a rendered document.\n\n\n\n\nCode\nlibrary(nycflights13)\nlibrary(tidyverse)\n\n\n\n\nCode\n# This can be slow; comment it out if your network is slow.\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nNROW(available.packages())\n\n\n[1] 22808\n\n\n\n\nCode\nhead(flights, 10)\n\n\n# A tibble: 10 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# â„¹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nCode\nmy_apples &lt;- 5\nmy_oranges &lt;- 6\nmy_fruit &lt;- my_apples + my_oranges\nmy_fruit\n\n\n[1] 11\n\n\n\n\nCode\n# This is a comment\nx &lt;- 1  # Inline comment\n\n# This line will not run:\n# y &lt;- 2\n\n\n\n\nCode\nnum  &lt;- c(1.2, 3.5)\nint  &lt;- c(1L, 2L, 3L)\nchr  &lt;- c(\"a\", \"b\")\nlgc  &lt;- c(TRUE, FALSE, NA)\n\ntypeof(num); typeof(int); typeof(chr); typeof(lgc)\n\n\n[1] \"double\"\n\n\n[1] \"integer\"\n\n\n[1] \"character\"\n\n\n[1] \"logical\"\n\n\nCode\nclass(num)\n\n\n[1] \"numeric\"\n\n\nCode\nas.numeric(chr)   # Conversion fails, produces NA\n\n\n[1] NA NA\n\n\nCode\nis.na(lgc)\n\n\n[1] FALSE FALSE  TRUE\n\n\n\n\nCode\nx &lt;- c(1, 2, NA, 4)\nmean(x, na.rm = TRUE)\n\n\n[1] 2.333333\n\n\n\n\nCode\nfahrenheit_to_celsius &lt;- function(f) {\n  (f - 32) * 5/9\n}\nfahrenheit_to_celsius(77)\n\n\n[1] 25\n\n\n\n\nCode\nn &lt;- 5\nif (n %% 2 == 0) {\n  msg &lt;- \"even\"\n} else {\n  msg &lt;- \"odd\"\n}\nmsg\n\n\n[1] \"odd\"\n\n\n\n\nCode\nout &lt;- c()\nfor (i in 1:5) {\n  out[i] &lt;- i^2\n}\nout\n\n\n[1]  1  4  9 16 25\n\n\n\n\nCode\nx &lt;- -3:3\nifelse(x &gt;= 0, \"non-negative\", \"negative\")\n\n\n[1] \"negative\"     \"negative\"     \"negative\"     \"non-negative\" \"non-negative\"\n[6] \"non-negative\" \"non-negative\"\n\n\n\n\nCode\nv &lt;- c(2, 5, NA, 9, 11)\nmean(v, na.rm = TRUE)\n\n\n[1] 6.75\n\n\nCode\nsum(v, na.rm = TRUE)\n\n\n[1] 27\n\n\nCode\nlength(v)\n\n\n[1] 5\n\n\n\n\nCode\nc_to_f &lt;- function(c) {\n  (c * 9/5) + 32\n}\nc_to_f(0)\n\n\n[1] 32\n\n\nCode\nc_to_f(20)\n\n\n[1] 68\n\n\nCode\nc_to_f(100)\n\n\n[1] 212\n\n\n\n\nCode\nflights |&gt;\n  group_by(month) |&gt;\n  summarize(mean_dep = mean(dep_delay, na.rm = TRUE)) |&gt;\n  arrange(month)\n\n\n# A tibble: 12 Ã— 2\n   month mean_dep\n   &lt;int&gt;    &lt;dbl&gt;\n 1     1    10.0 \n 2     2    10.8 \n 3     3    13.2 \n 4     4    13.9 \n 5     5    13.0 \n 6     6    20.8 \n 7     7    21.7 \n 8     8    12.6 \n 9     9     6.72\n10    10     6.24\n11    11     5.44\n12    12    16.6"
  },
  {
    "objectID": "lab02.html#new-element-two-columns",
    "href": "lab02.html#new-element-two-columns",
    "title": "Lab 02 Practice",
    "section": "NEW ELEMENT â€” Two Columns",
    "text": "NEW ELEMENT â€” Two Columns\n\n\nNotes\n\nData: txhousing\nCity: Houston\nMetric: yearly sales\n\n\n\n\n# A tibble: 6 Ã— 3\n   year sales avg_price\n  &lt;int&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1  2000 52459   153285.\n2  2001 53856   158590.\n3  2002 56563   167714.\n4  2003 60732   171537.\n5  2004 66979   175822.\n6  2005 72800   185497."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Xiaolin Wu â€” STA 9750 Website",
    "section": "",
    "text": "Welcome!\nHi, my name is Xiaolin Wu.\nThis website hosts my submission materials for STA 9750 at Baruch College.\nI am currently a graduate student with interests in data analytics and urban design.\nHere, youâ€™ll find my course projects, assignments, and reflections.\n\nðŸ“„ My Resume\n\nðŸ“§ Contact: xiaolin.wu1@baruchmail.cuny.edu\n\n\n\n\n\n\n\n\nLast Updated: Friday 10 03, 2025 at 22:33PM"
  }
]